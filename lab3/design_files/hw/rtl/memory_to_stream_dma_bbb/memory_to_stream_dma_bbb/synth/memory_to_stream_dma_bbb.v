// memory_to_stream_dma_bbb.v

// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module memory_to_stream_dma_bbb (
		input  wire         clk_clk,                        //              clk.clk
		output wire         csr_waitrequest,                //              csr.waitrequest
		output wire [63:0]  csr_readdata,                   //                 .readdata
		output wire         csr_readdatavalid,              //                 .readdatavalid
		input  wire [0:0]   csr_burstcount,                 //                 .burstcount
		input  wire [63:0]  csr_writedata,                  //                 .writedata
		input  wire [7:0]   csr_address,                    //                 .address
		input  wire         csr_write,                      //                 .write
		input  wire         csr_read,                       //                 .read
		input  wire [7:0]   csr_byteenable,                 //                 .byteenable
		input  wire         csr_debugaccess,                //                 .debugaccess
		input  wire         host_read_waitrequest,          //        host_read.waitrequest
		input  wire [511:0] host_read_readdata,             //                 .readdata
		input  wire         host_read_readdatavalid,        //                 .readdatavalid
		output wire [2:0]   host_read_burstcount,           //                 .burstcount
		output wire [511:0] host_read_writedata,            //                 .writedata
		output wire [47:0]  host_read_address,              //                 .address
		output wire         host_read_write,                //                 .write
		output wire         host_read_read,                 //                 .read
		output wire [63:0]  host_read_byteenable,           //                 .byteenable
		output wire         host_read_debugaccess,          //                 .debugaccess
		output wire [47:0]  descriptor_fetch_address,       // descriptor_fetch.address
		output wire [2:0]   descriptor_fetch_burstcount,    //                 .burstcount
		output wire [63:0]  descriptor_fetch_byteenable,    //                 .byteenable
		output wire         descriptor_fetch_read,          //                 .read
		input  wire [511:0] descriptor_fetch_readdata,      //                 .readdata
		input  wire         descriptor_fetch_readdatavalid, //                 .readdatavalid
		input  wire         descriptor_fetch_waitrequest,   //                 .waitrequest
		output wire [47:0]  descriptor_store_address,       // descriptor_store.address
		output wire [2:0]   descriptor_store_burstcount,    //                 .burstcount
		output wire [63:0]  descriptor_store_byteenable,    //                 .byteenable
		input  wire         descriptor_store_waitrequest,   //                 .waitrequest
		output wire         descriptor_store_write,         //                 .write
		output wire [511:0] descriptor_store_writedata,     //                 .writedata
		input  wire         mem_read_waitrequest,           //         mem_read.waitrequest
		input  wire [511:0] mem_read_readdata,              //                 .readdata
		input  wire         mem_read_readdatavalid,         //                 .readdatavalid
		output wire [2:0]   mem_read_burstcount,            //                 .burstcount
		output wire [511:0] mem_read_writedata,             //                 .writedata
		output wire [47:0]  mem_read_address,               //                 .address
		output wire         mem_read_write,                 //                 .write
		output wire         mem_read_read,                  //                 .read
		output wire [63:0]  mem_read_byteenable,            //                 .byteenable
		output wire         mem_read_debugaccess,           //                 .debugaccess
		output wire [511:0] m2s_st_source_data,             //    m2s_st_source.data
		output wire         m2s_st_source_valid,            //                 .valid
		input  wire         m2s_st_source_ready,            //                 .ready
		output wire         m2s_st_source_startofpacket,    //                 .startofpacket
		output wire         m2s_st_source_endofpacket,      //                 .endofpacket
		output wire [5:0]   m2s_st_source_empty,            //                 .empty
		input  wire         reset_reset                     //            reset.reset
	);

	wire          m2s_dispatcher_read_command_source_valid;                   // m2s_dispatcher:src_read_master_valid -> m2s_read_master:snk_command_valid
	wire  [255:0] m2s_dispatcher_read_command_source_data;                    // m2s_dispatcher:src_read_master_data -> m2s_read_master:snk_command_data
	wire          m2s_dispatcher_read_command_source_ready;                   // m2s_read_master:snk_command_ready -> m2s_dispatcher:src_read_master_ready
	wire          m2s_read_master_response_source_valid;                      // m2s_read_master:src_response_valid -> m2s_dispatcher:snk_read_master_valid
	wire  [255:0] m2s_read_master_response_source_data;                       // m2s_read_master:src_response_data -> m2s_dispatcher:snk_read_master_data
	wire          m2s_read_master_response_source_ready;                      // m2s_dispatcher:snk_read_master_ready -> m2s_read_master:src_response_ready
	wire          m2s_dispatcher_response_source_valid;                       // m2s_dispatcher:src_response_valid -> m2s_mSGDMA_frontend:snk_response_valid
	wire  [255:0] m2s_dispatcher_response_source_data;                        // m2s_dispatcher:src_response_data -> m2s_mSGDMA_frontend:snk_response_data
	wire          m2s_dispatcher_response_source_ready;                       // m2s_mSGDMA_frontend:snk_response_ready -> m2s_dispatcher:src_response_ready
	wire          m2s_msgdma_frontend_descriptor_source_valid;                // m2s_mSGDMA_frontend:src_descriptor_valid -> m2s_dispatcher:snk_descriptor_valid
	wire  [255:0] m2s_msgdma_frontend_descriptor_source_data;                 // m2s_mSGDMA_frontend:src_descriptor_data -> m2s_dispatcher:snk_descriptor_data
	wire          m2s_msgdma_frontend_descriptor_source_ready;                // m2s_dispatcher:snk_descriptor_ready -> m2s_mSGDMA_frontend:src_descriptor_ready
	wire          clock_in_out_clk_clk;                                       // clock_in:out_clk -> [csr_bridge:clk, m2s_dispatcher:clk, m2s_host_bridge:clk, m2s_id:clk, m2s_mSGDMA_frontend:clk, m2s_memory_bridge:clk, m2s_read_master:clk, mm_interconnect_0:clock_in_out_clk_clk, mm_interconnect_1:clock_in_out_clk_clk, reset_in:clk]
	wire          reset_in_out_reset_reset;                                   // reset_in:out_reset -> [csr_bridge:reset, m2s_dispatcher:reset, m2s_host_bridge:reset, m2s_id:reset, m2s_mSGDMA_frontend:reset, m2s_memory_bridge:reset, m2s_read_master:reset, mm_interconnect_0:m2s_memory_bridge_reset_reset_bridge_in_reset_reset, mm_interconnect_1:csr_bridge_reset_reset_bridge_in_reset_reset]
	wire  [511:0] m2s_read_master_data_read_master_readdata;                  // mm_interconnect_0:m2s_read_master_Data_Read_Master_readdata -> m2s_read_master:master_readdata
	wire          m2s_read_master_data_read_master_waitrequest;               // mm_interconnect_0:m2s_read_master_Data_Read_Master_waitrequest -> m2s_read_master:master_waitrequest
	wire   [48:0] m2s_read_master_data_read_master_address;                   // m2s_read_master:master_address -> mm_interconnect_0:m2s_read_master_Data_Read_Master_address
	wire          m2s_read_master_data_read_master_read;                      // m2s_read_master:master_read -> mm_interconnect_0:m2s_read_master_Data_Read_Master_read
	wire   [63:0] m2s_read_master_data_read_master_byteenable;                // m2s_read_master:master_byteenable -> mm_interconnect_0:m2s_read_master_Data_Read_Master_byteenable
	wire          m2s_read_master_data_read_master_readdatavalid;             // mm_interconnect_0:m2s_read_master_Data_Read_Master_readdatavalid -> m2s_read_master:master_readdatavalid
	wire    [2:0] m2s_read_master_data_read_master_burstcount;                // m2s_read_master:master_burstcount -> mm_interconnect_0:m2s_read_master_Data_Read_Master_burstcount
	wire  [511:0] mm_interconnect_0_m2s_memory_bridge_s0_readdata;            // m2s_memory_bridge:s0_readdata -> mm_interconnect_0:m2s_memory_bridge_s0_readdata
	wire          mm_interconnect_0_m2s_memory_bridge_s0_waitrequest;         // m2s_memory_bridge:s0_waitrequest -> mm_interconnect_0:m2s_memory_bridge_s0_waitrequest
	wire          mm_interconnect_0_m2s_memory_bridge_s0_debugaccess;         // mm_interconnect_0:m2s_memory_bridge_s0_debugaccess -> m2s_memory_bridge:s0_debugaccess
	wire   [47:0] mm_interconnect_0_m2s_memory_bridge_s0_address;             // mm_interconnect_0:m2s_memory_bridge_s0_address -> m2s_memory_bridge:s0_address
	wire          mm_interconnect_0_m2s_memory_bridge_s0_read;                // mm_interconnect_0:m2s_memory_bridge_s0_read -> m2s_memory_bridge:s0_read
	wire   [63:0] mm_interconnect_0_m2s_memory_bridge_s0_byteenable;          // mm_interconnect_0:m2s_memory_bridge_s0_byteenable -> m2s_memory_bridge:s0_byteenable
	wire          mm_interconnect_0_m2s_memory_bridge_s0_readdatavalid;       // m2s_memory_bridge:s0_readdatavalid -> mm_interconnect_0:m2s_memory_bridge_s0_readdatavalid
	wire          mm_interconnect_0_m2s_memory_bridge_s0_write;               // mm_interconnect_0:m2s_memory_bridge_s0_write -> m2s_memory_bridge:s0_write
	wire  [511:0] mm_interconnect_0_m2s_memory_bridge_s0_writedata;           // mm_interconnect_0:m2s_memory_bridge_s0_writedata -> m2s_memory_bridge:s0_writedata
	wire    [2:0] mm_interconnect_0_m2s_memory_bridge_s0_burstcount;          // mm_interconnect_0:m2s_memory_bridge_s0_burstcount -> m2s_memory_bridge:s0_burstcount
	wire  [511:0] mm_interconnect_0_m2s_host_bridge_s0_readdata;              // m2s_host_bridge:s0_readdata -> mm_interconnect_0:m2s_host_bridge_s0_readdata
	wire          mm_interconnect_0_m2s_host_bridge_s0_waitrequest;           // m2s_host_bridge:s0_waitrequest -> mm_interconnect_0:m2s_host_bridge_s0_waitrequest
	wire          mm_interconnect_0_m2s_host_bridge_s0_debugaccess;           // mm_interconnect_0:m2s_host_bridge_s0_debugaccess -> m2s_host_bridge:s0_debugaccess
	wire   [47:0] mm_interconnect_0_m2s_host_bridge_s0_address;               // mm_interconnect_0:m2s_host_bridge_s0_address -> m2s_host_bridge:s0_address
	wire          mm_interconnect_0_m2s_host_bridge_s0_read;                  // mm_interconnect_0:m2s_host_bridge_s0_read -> m2s_host_bridge:s0_read
	wire   [63:0] mm_interconnect_0_m2s_host_bridge_s0_byteenable;            // mm_interconnect_0:m2s_host_bridge_s0_byteenable -> m2s_host_bridge:s0_byteenable
	wire          mm_interconnect_0_m2s_host_bridge_s0_readdatavalid;         // m2s_host_bridge:s0_readdatavalid -> mm_interconnect_0:m2s_host_bridge_s0_readdatavalid
	wire          mm_interconnect_0_m2s_host_bridge_s0_write;                 // mm_interconnect_0:m2s_host_bridge_s0_write -> m2s_host_bridge:s0_write
	wire  [511:0] mm_interconnect_0_m2s_host_bridge_s0_writedata;             // mm_interconnect_0:m2s_host_bridge_s0_writedata -> m2s_host_bridge:s0_writedata
	wire    [2:0] mm_interconnect_0_m2s_host_bridge_s0_burstcount;            // mm_interconnect_0:m2s_host_bridge_s0_burstcount -> m2s_host_bridge:s0_burstcount
	wire          csr_bridge_m0_waitrequest;                                  // mm_interconnect_1:csr_bridge_m0_waitrequest -> csr_bridge:m0_waitrequest
	wire   [63:0] csr_bridge_m0_readdata;                                     // mm_interconnect_1:csr_bridge_m0_readdata -> csr_bridge:m0_readdata
	wire          csr_bridge_m0_debugaccess;                                  // csr_bridge:m0_debugaccess -> mm_interconnect_1:csr_bridge_m0_debugaccess
	wire    [7:0] csr_bridge_m0_address;                                      // csr_bridge:m0_address -> mm_interconnect_1:csr_bridge_m0_address
	wire          csr_bridge_m0_read;                                         // csr_bridge:m0_read -> mm_interconnect_1:csr_bridge_m0_read
	wire    [7:0] csr_bridge_m0_byteenable;                                   // csr_bridge:m0_byteenable -> mm_interconnect_1:csr_bridge_m0_byteenable
	wire          csr_bridge_m0_readdatavalid;                                // mm_interconnect_1:csr_bridge_m0_readdatavalid -> csr_bridge:m0_readdatavalid
	wire   [63:0] csr_bridge_m0_writedata;                                    // csr_bridge:m0_writedata -> mm_interconnect_1:csr_bridge_m0_writedata
	wire          csr_bridge_m0_write;                                        // csr_bridge:m0_write -> mm_interconnect_1:csr_bridge_m0_write
	wire    [0:0] csr_bridge_m0_burstcount;                                   // csr_bridge:m0_burstcount -> mm_interconnect_1:csr_bridge_m0_burstcount
	wire   [31:0] mm_interconnect_1_m2s_dispatcher_csr_readdata;              // m2s_dispatcher:csr_readdata -> mm_interconnect_1:m2s_dispatcher_CSR_readdata
	wire    [2:0] mm_interconnect_1_m2s_dispatcher_csr_address;               // mm_interconnect_1:m2s_dispatcher_CSR_address -> m2s_dispatcher:csr_address
	wire          mm_interconnect_1_m2s_dispatcher_csr_read;                  // mm_interconnect_1:m2s_dispatcher_CSR_read -> m2s_dispatcher:csr_read
	wire    [3:0] mm_interconnect_1_m2s_dispatcher_csr_byteenable;            // mm_interconnect_1:m2s_dispatcher_CSR_byteenable -> m2s_dispatcher:csr_byteenable
	wire          mm_interconnect_1_m2s_dispatcher_csr_write;                 // mm_interconnect_1:m2s_dispatcher_CSR_write -> m2s_dispatcher:csr_write
	wire   [31:0] mm_interconnect_1_m2s_dispatcher_csr_writedata;             // mm_interconnect_1:m2s_dispatcher_CSR_writedata -> m2s_dispatcher:csr_writedata
	wire   [63:0] mm_interconnect_1_m2s_id_afu_cfg_slave_readdata;            // m2s_id:avmm_readdata -> mm_interconnect_1:m2s_id_afu_cfg_slave_readdata
	wire    [2:0] mm_interconnect_1_m2s_id_afu_cfg_slave_address;             // mm_interconnect_1:m2s_id_afu_cfg_slave_address -> m2s_id:avmm_address
	wire          mm_interconnect_1_m2s_id_afu_cfg_slave_read;                // mm_interconnect_1:m2s_id_afu_cfg_slave_read -> m2s_id:avmm_read
	wire          mm_interconnect_1_m2s_id_afu_cfg_slave_write;               // mm_interconnect_1:m2s_id_afu_cfg_slave_write -> m2s_id:avmm_write
	wire   [63:0] mm_interconnect_1_m2s_id_afu_cfg_slave_writedata;           // mm_interconnect_1:m2s_id_afu_cfg_slave_writedata -> m2s_id:avmm_writedata
	wire   [63:0] mm_interconnect_1_m2s_msgdma_frontend_csr_slave_readdata;   // m2s_mSGDMA_frontend:s_readdata -> mm_interconnect_1:m2s_mSGDMA_frontend_csr_slave_readdata
	wire    [2:0] mm_interconnect_1_m2s_msgdma_frontend_csr_slave_address;    // mm_interconnect_1:m2s_mSGDMA_frontend_csr_slave_address -> m2s_mSGDMA_frontend:s_address
	wire          mm_interconnect_1_m2s_msgdma_frontend_csr_slave_read;       // mm_interconnect_1:m2s_mSGDMA_frontend_csr_slave_read -> m2s_mSGDMA_frontend:s_read
	wire    [7:0] mm_interconnect_1_m2s_msgdma_frontend_csr_slave_byteenable; // mm_interconnect_1:m2s_mSGDMA_frontend_csr_slave_byteenable -> m2s_mSGDMA_frontend:s_byteenable
	wire          mm_interconnect_1_m2s_msgdma_frontend_csr_slave_write;      // mm_interconnect_1:m2s_mSGDMA_frontend_csr_slave_write -> m2s_mSGDMA_frontend:s_write
	wire   [63:0] mm_interconnect_1_m2s_msgdma_frontend_csr_slave_writedata;  // mm_interconnect_1:m2s_mSGDMA_frontend_csr_slave_writedata -> m2s_mSGDMA_frontend:s_writedata

	memory_to_stream_dma_bbb_clock_in clock_in (
		.in_clk  (clk_clk),              //   input,  width = 1,  in_clk.clk
		.out_clk (clock_in_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	memory_to_stream_dma_bbb_csr_bridge csr_bridge (
		.clk              (clock_in_out_clk_clk),        //   input,   width = 1,   clk.clk
		.m0_waitrequest   (csr_bridge_m0_waitrequest),   //   input,   width = 1,    m0.waitrequest
		.m0_readdata      (csr_bridge_m0_readdata),      //   input,  width = 64,      .readdata
		.m0_readdatavalid (csr_bridge_m0_readdatavalid), //   input,   width = 1,      .readdatavalid
		.m0_burstcount    (csr_bridge_m0_burstcount),    //  output,   width = 1,      .burstcount
		.m0_writedata     (csr_bridge_m0_writedata),     //  output,  width = 64,      .writedata
		.m0_address       (csr_bridge_m0_address),       //  output,   width = 8,      .address
		.m0_write         (csr_bridge_m0_write),         //  output,   width = 1,      .write
		.m0_read          (csr_bridge_m0_read),          //  output,   width = 1,      .read
		.m0_byteenable    (csr_bridge_m0_byteenable),    //  output,   width = 8,      .byteenable
		.m0_debugaccess   (csr_bridge_m0_debugaccess),   //  output,   width = 1,      .debugaccess
		.reset            (reset_in_out_reset_reset),    //   input,   width = 1, reset.reset
		.s0_waitrequest   (csr_waitrequest),             //  output,   width = 1,    s0.waitrequest
		.s0_readdata      (csr_readdata),                //  output,  width = 64,      .readdata
		.s0_readdatavalid (csr_readdatavalid),           //  output,   width = 1,      .readdatavalid
		.s0_burstcount    (csr_burstcount),              //   input,   width = 1,      .burstcount
		.s0_writedata     (csr_writedata),               //   input,  width = 64,      .writedata
		.s0_address       (csr_address),                 //   input,   width = 8,      .address
		.s0_write         (csr_write),                   //   input,   width = 1,      .write
		.s0_read          (csr_read),                    //   input,   width = 1,      .read
		.s0_byteenable    (csr_byteenable),              //   input,   width = 8,      .byteenable
		.s0_debugaccess   (csr_debugaccess)              //   input,   width = 1,      .debugaccess
	);

	memory_to_stream_dma_bbb_dispatcher m2s_dispatcher (
		.csr_writedata         (mm_interconnect_1_m2s_dispatcher_csr_writedata),  //   input,   width = 32,                 CSR.writedata
		.csr_write             (mm_interconnect_1_m2s_dispatcher_csr_write),      //   input,    width = 1,                    .write
		.csr_byteenable        (mm_interconnect_1_m2s_dispatcher_csr_byteenable), //   input,    width = 4,                    .byteenable
		.csr_readdata          (mm_interconnect_1_m2s_dispatcher_csr_readdata),   //  output,   width = 32,                    .readdata
		.csr_read              (mm_interconnect_1_m2s_dispatcher_csr_read),       //   input,    width = 1,                    .read
		.csr_address           (mm_interconnect_1_m2s_dispatcher_csr_address),    //   input,    width = 3,                    .address
		.snk_descriptor_data   (m2s_msgdma_frontend_descriptor_source_data),      //   input,  width = 256,     Descriptor_Sink.data
		.snk_descriptor_valid  (m2s_msgdma_frontend_descriptor_source_valid),     //   input,    width = 1,                    .valid
		.snk_descriptor_ready  (m2s_msgdma_frontend_descriptor_source_ready),     //  output,    width = 1,                    .ready
		.src_read_master_data  (m2s_dispatcher_read_command_source_data),         //  output,  width = 256, Read_Command_Source.data
		.src_read_master_valid (m2s_dispatcher_read_command_source_valid),        //  output,    width = 1,                    .valid
		.src_read_master_ready (m2s_dispatcher_read_command_source_ready),        //   input,    width = 1,                    .ready
		.snk_read_master_data  (m2s_read_master_response_source_data),            //   input,  width = 256,  Read_Response_Sink.data
		.snk_read_master_valid (m2s_read_master_response_source_valid),           //   input,    width = 1,                    .valid
		.snk_read_master_ready (m2s_read_master_response_source_ready),           //  output,    width = 1,                    .ready
		.src_response_data     (m2s_dispatcher_response_source_data),             //  output,  width = 256,     Response_Source.data
		.src_response_valid    (m2s_dispatcher_response_source_valid),            //  output,    width = 1,                    .valid
		.src_response_ready    (m2s_dispatcher_response_source_ready),            //   input,    width = 1,                    .ready
		.clk                   (clock_in_out_clk_clk),                            //   input,    width = 1,               clock.clk
		.reset                 (reset_in_out_reset_reset)                         //   input,    width = 1,         clock_reset.reset
	);

	memory_to_stream_dma_bbb_host_bridge m2s_host_bridge (
		.clk              (clock_in_out_clk_clk),                               //   input,    width = 1,   clk.clk
		.m0_waitrequest   (host_read_waitrequest),                              //   input,    width = 1,    m0.waitrequest
		.m0_readdata      (host_read_readdata),                                 //   input,  width = 512,      .readdata
		.m0_readdatavalid (host_read_readdatavalid),                            //   input,    width = 1,      .readdatavalid
		.m0_burstcount    (host_read_burstcount),                               //  output,    width = 3,      .burstcount
		.m0_writedata     (host_read_writedata),                                //  output,  width = 512,      .writedata
		.m0_address       (host_read_address),                                  //  output,   width = 48,      .address
		.m0_write         (host_read_write),                                    //  output,    width = 1,      .write
		.m0_read          (host_read_read),                                     //  output,    width = 1,      .read
		.m0_byteenable    (host_read_byteenable),                               //  output,   width = 64,      .byteenable
		.m0_debugaccess   (host_read_debugaccess),                              //  output,    width = 1,      .debugaccess
		.reset            (reset_in_out_reset_reset),                           //   input,    width = 1, reset.reset
		.s0_waitrequest   (mm_interconnect_0_m2s_host_bridge_s0_waitrequest),   //  output,    width = 1,    s0.waitrequest
		.s0_readdata      (mm_interconnect_0_m2s_host_bridge_s0_readdata),      //  output,  width = 512,      .readdata
		.s0_readdatavalid (mm_interconnect_0_m2s_host_bridge_s0_readdatavalid), //  output,    width = 1,      .readdatavalid
		.s0_burstcount    (mm_interconnect_0_m2s_host_bridge_s0_burstcount),    //   input,    width = 3,      .burstcount
		.s0_writedata     (mm_interconnect_0_m2s_host_bridge_s0_writedata),     //   input,  width = 512,      .writedata
		.s0_address       (mm_interconnect_0_m2s_host_bridge_s0_address),       //   input,   width = 48,      .address
		.s0_write         (mm_interconnect_0_m2s_host_bridge_s0_write),         //   input,    width = 1,      .write
		.s0_read          (mm_interconnect_0_m2s_host_bridge_s0_read),          //   input,    width = 1,      .read
		.s0_byteenable    (mm_interconnect_0_m2s_host_bridge_s0_byteenable),    //   input,   width = 64,      .byteenable
		.s0_debugaccess   (mm_interconnect_0_m2s_host_bridge_s0_debugaccess)    //   input,    width = 1,      .debugaccess
	);

	memory_to_stream_dma_bbb_id m2s_id (
		.avmm_readdata  (mm_interconnect_1_m2s_id_afu_cfg_slave_readdata),  //  output,  width = 64, afu_cfg_slave.readdata
		.avmm_writedata (mm_interconnect_1_m2s_id_afu_cfg_slave_writedata), //   input,  width = 64,              .writedata
		.avmm_address   (mm_interconnect_1_m2s_id_afu_cfg_slave_address),   //   input,   width = 3,              .address
		.avmm_write     (mm_interconnect_1_m2s_id_afu_cfg_slave_write),     //   input,   width = 1,              .write
		.avmm_read      (mm_interconnect_1_m2s_id_afu_cfg_slave_read),      //   input,   width = 1,              .read
		.clk            (clock_in_out_clk_clk),                             //   input,   width = 1,         clock.clk
		.reset          (reset_in_out_reset_reset)                          //   input,   width = 1,         reset.reset
	);

	memory_to_stream_dma_bbb_mSGDMA_frontend m2s_msgdma_frontend (
		.clk                   (clock_in_out_clk_clk),                                       //   input,    width = 1,                   clock.clk
		.s_address             (mm_interconnect_1_m2s_msgdma_frontend_csr_slave_address),    //   input,    width = 3,               csr_slave.address
		.s_read                (mm_interconnect_1_m2s_msgdma_frontend_csr_slave_read),       //   input,    width = 1,                        .read
		.s_readdata            (mm_interconnect_1_m2s_msgdma_frontend_csr_slave_readdata),   //  output,   width = 64,                        .readdata
		.s_write               (mm_interconnect_1_m2s_msgdma_frontend_csr_slave_write),      //   input,    width = 1,                        .write
		.s_writedata           (mm_interconnect_1_m2s_msgdma_frontend_csr_slave_writedata),  //   input,   width = 64,                        .writedata
		.s_byteenable          (mm_interconnect_1_m2s_msgdma_frontend_csr_slave_byteenable), //   input,    width = 8,                        .byteenable
		.m_fetch_address       (descriptor_fetch_address),                                   //  output,   width = 48, descriptor_fetch_master.address
		.m_fetch_burst         (descriptor_fetch_burstcount),                                //  output,    width = 3,                        .burstcount
		.m_fetch_byteenable    (descriptor_fetch_byteenable),                                //  output,   width = 64,                        .byteenable
		.m_fetch_read          (descriptor_fetch_read),                                      //  output,    width = 1,                        .read
		.m_fetch_readdata      (descriptor_fetch_readdata),                                  //   input,  width = 512,                        .readdata
		.m_fetch_readdatavalid (descriptor_fetch_readdatavalid),                             //   input,    width = 1,                        .readdatavalid
		.m_fetch_waitrequest   (descriptor_fetch_waitrequest),                               //   input,    width = 1,                        .waitrequest
		.src_descriptor_data   (m2s_msgdma_frontend_descriptor_source_data),                 //  output,  width = 256,       descriptor_source.data
		.src_descriptor_ready  (m2s_msgdma_frontend_descriptor_source_ready),                //   input,    width = 1,                        .ready
		.src_descriptor_valid  (m2s_msgdma_frontend_descriptor_source_valid),                //  output,    width = 1,                        .valid
		.m_store_address       (descriptor_store_address),                                   //  output,   width = 48, descriptor_store_master.address
		.m_store_burst         (descriptor_store_burstcount),                                //  output,    width = 3,                        .burstcount
		.m_store_byteenable    (descriptor_store_byteenable),                                //  output,   width = 64,                        .byteenable
		.m_store_waitrequest   (descriptor_store_waitrequest),                               //   input,    width = 1,                        .waitrequest
		.m_store_write         (descriptor_store_write),                                     //  output,    width = 1,                        .write
		.m_store_writedata     (descriptor_store_writedata),                                 //  output,  width = 512,                        .writedata
		.reset                 (reset_in_out_reset_reset),                                   //   input,    width = 1,                   reset.reset
		.snk_response_data     (m2s_dispatcher_response_source_data),                        //   input,  width = 256,           response_sink.data
		.snk_response_ready    (m2s_dispatcher_response_source_ready),                       //  output,    width = 1,                        .ready
		.snk_response_valid    (m2s_dispatcher_response_source_valid)                        //   input,    width = 1,                        .valid
	);

	memory_to_stream_dma_bbb_memory_bridge m2s_memory_bridge (
		.clk              (clock_in_out_clk_clk),                                 //   input,    width = 1,   clk.clk
		.m0_waitrequest   (mem_read_waitrequest),                                 //   input,    width = 1,    m0.waitrequest
		.m0_readdata      (mem_read_readdata),                                    //   input,  width = 512,      .readdata
		.m0_readdatavalid (mem_read_readdatavalid),                               //   input,    width = 1,      .readdatavalid
		.m0_burstcount    (mem_read_burstcount),                                  //  output,    width = 3,      .burstcount
		.m0_writedata     (mem_read_writedata),                                   //  output,  width = 512,      .writedata
		.m0_address       (mem_read_address),                                     //  output,   width = 48,      .address
		.m0_write         (mem_read_write),                                       //  output,    width = 1,      .write
		.m0_read          (mem_read_read),                                        //  output,    width = 1,      .read
		.m0_byteenable    (mem_read_byteenable),                                  //  output,   width = 64,      .byteenable
		.m0_debugaccess   (mem_read_debugaccess),                                 //  output,    width = 1,      .debugaccess
		.reset            (reset_in_out_reset_reset),                             //   input,    width = 1, reset.reset
		.s0_waitrequest   (mm_interconnect_0_m2s_memory_bridge_s0_waitrequest),   //  output,    width = 1,    s0.waitrequest
		.s0_readdata      (mm_interconnect_0_m2s_memory_bridge_s0_readdata),      //  output,  width = 512,      .readdata
		.s0_readdatavalid (mm_interconnect_0_m2s_memory_bridge_s0_readdatavalid), //  output,    width = 1,      .readdatavalid
		.s0_burstcount    (mm_interconnect_0_m2s_memory_bridge_s0_burstcount),    //   input,    width = 3,      .burstcount
		.s0_writedata     (mm_interconnect_0_m2s_memory_bridge_s0_writedata),     //   input,  width = 512,      .writedata
		.s0_address       (mm_interconnect_0_m2s_memory_bridge_s0_address),       //   input,   width = 48,      .address
		.s0_write         (mm_interconnect_0_m2s_memory_bridge_s0_write),         //   input,    width = 1,      .write
		.s0_read          (mm_interconnect_0_m2s_memory_bridge_s0_read),          //   input,    width = 1,      .read
		.s0_byteenable    (mm_interconnect_0_m2s_memory_bridge_s0_byteenable),    //   input,   width = 64,      .byteenable
		.s0_debugaccess   (mm_interconnect_0_m2s_memory_bridge_s0_debugaccess)    //   input,    width = 1,      .debugaccess
	);

	memory_to_stream_dma_bbb_dma_read_master m2s_read_master (
		.clk                  (clock_in_out_clk_clk),                           //   input,    width = 1,            Clock.clk
		.reset                (reset_in_out_reset_reset),                       //   input,    width = 1,      Clock_reset.reset
		.snk_command_data     (m2s_dispatcher_read_command_source_data),        //   input,  width = 256,     Command_Sink.data
		.snk_command_valid    (m2s_dispatcher_read_command_source_valid),       //   input,    width = 1,                 .valid
		.snk_command_ready    (m2s_dispatcher_read_command_source_ready),       //  output,    width = 1,                 .ready
		.master_address       (m2s_read_master_data_read_master_address),       //  output,   width = 49, Data_Read_Master.address
		.master_read          (m2s_read_master_data_read_master_read),          //  output,    width = 1,                 .read
		.master_byteenable    (m2s_read_master_data_read_master_byteenable),    //  output,   width = 64,                 .byteenable
		.master_readdata      (m2s_read_master_data_read_master_readdata),      //   input,  width = 512,                 .readdata
		.master_waitrequest   (m2s_read_master_data_read_master_waitrequest),   //   input,    width = 1,                 .waitrequest
		.master_readdatavalid (m2s_read_master_data_read_master_readdatavalid), //   input,    width = 1,                 .readdatavalid
		.master_burstcount    (m2s_read_master_data_read_master_burstcount),    //  output,    width = 3,                 .burstcount
		.src_data             (m2s_st_source_data),                             //  output,  width = 512,      Data_Source.data
		.src_valid            (m2s_st_source_valid),                            //  output,    width = 1,                 .valid
		.src_ready            (m2s_st_source_ready),                            //   input,    width = 1,                 .ready
		.src_sop              (m2s_st_source_startofpacket),                    //  output,    width = 1,                 .startofpacket
		.src_eop              (m2s_st_source_endofpacket),                      //  output,    width = 1,                 .endofpacket
		.src_empty            (m2s_st_source_empty),                            //  output,    width = 6,                 .empty
		.src_response_data    (m2s_read_master_response_source_data),           //  output,  width = 256,  Response_Source.data
		.src_response_valid   (m2s_read_master_response_source_valid),          //  output,    width = 1,                 .valid
		.src_response_ready   (m2s_read_master_response_source_ready)           //   input,    width = 1,                 .ready
	);

	memory_to_stream_dma_bbb_reset_in reset_in (
		.clk       (clock_in_out_clk_clk),     //   input,  width = 1,       clk.clk
		.in_reset  (reset_reset),              //   input,  width = 1,  in_reset.reset
		.out_reset (reset_in_out_reset_reset)  //  output,  width = 1, out_reset.reset
	);

	memory_to_stream_dma_bbb_altera_mm_interconnect_191_rqdmkcy mm_interconnect_0 (
		.m2s_read_master_Data_Read_Master_address            (m2s_read_master_data_read_master_address),             //   input,   width = 49,              m2s_read_master_Data_Read_Master.address
		.m2s_read_master_Data_Read_Master_waitrequest        (m2s_read_master_data_read_master_waitrequest),         //  output,    width = 1,                                              .waitrequest
		.m2s_read_master_Data_Read_Master_burstcount         (m2s_read_master_data_read_master_burstcount),          //   input,    width = 3,                                              .burstcount
		.m2s_read_master_Data_Read_Master_byteenable         (m2s_read_master_data_read_master_byteenable),          //   input,   width = 64,                                              .byteenable
		.m2s_read_master_Data_Read_Master_read               (m2s_read_master_data_read_master_read),                //   input,    width = 1,                                              .read
		.m2s_read_master_Data_Read_Master_readdata           (m2s_read_master_data_read_master_readdata),            //  output,  width = 512,                                              .readdata
		.m2s_read_master_Data_Read_Master_readdatavalid      (m2s_read_master_data_read_master_readdatavalid),       //  output,    width = 1,                                              .readdatavalid
		.m2s_memory_bridge_s0_address                        (mm_interconnect_0_m2s_memory_bridge_s0_address),       //  output,   width = 48,                          m2s_memory_bridge_s0.address
		.m2s_memory_bridge_s0_write                          (mm_interconnect_0_m2s_memory_bridge_s0_write),         //  output,    width = 1,                                              .write
		.m2s_memory_bridge_s0_read                           (mm_interconnect_0_m2s_memory_bridge_s0_read),          //  output,    width = 1,                                              .read
		.m2s_memory_bridge_s0_readdata                       (mm_interconnect_0_m2s_memory_bridge_s0_readdata),      //   input,  width = 512,                                              .readdata
		.m2s_memory_bridge_s0_writedata                      (mm_interconnect_0_m2s_memory_bridge_s0_writedata),     //  output,  width = 512,                                              .writedata
		.m2s_memory_bridge_s0_burstcount                     (mm_interconnect_0_m2s_memory_bridge_s0_burstcount),    //  output,    width = 3,                                              .burstcount
		.m2s_memory_bridge_s0_byteenable                     (mm_interconnect_0_m2s_memory_bridge_s0_byteenable),    //  output,   width = 64,                                              .byteenable
		.m2s_memory_bridge_s0_readdatavalid                  (mm_interconnect_0_m2s_memory_bridge_s0_readdatavalid), //   input,    width = 1,                                              .readdatavalid
		.m2s_memory_bridge_s0_waitrequest                    (mm_interconnect_0_m2s_memory_bridge_s0_waitrequest),   //   input,    width = 1,                                              .waitrequest
		.m2s_memory_bridge_s0_debugaccess                    (mm_interconnect_0_m2s_memory_bridge_s0_debugaccess),   //  output,    width = 1,                                              .debugaccess
		.m2s_host_bridge_s0_address                          (mm_interconnect_0_m2s_host_bridge_s0_address),         //  output,   width = 48,                            m2s_host_bridge_s0.address
		.m2s_host_bridge_s0_write                            (mm_interconnect_0_m2s_host_bridge_s0_write),           //  output,    width = 1,                                              .write
		.m2s_host_bridge_s0_read                             (mm_interconnect_0_m2s_host_bridge_s0_read),            //  output,    width = 1,                                              .read
		.m2s_host_bridge_s0_readdata                         (mm_interconnect_0_m2s_host_bridge_s0_readdata),        //   input,  width = 512,                                              .readdata
		.m2s_host_bridge_s0_writedata                        (mm_interconnect_0_m2s_host_bridge_s0_writedata),       //  output,  width = 512,                                              .writedata
		.m2s_host_bridge_s0_burstcount                       (mm_interconnect_0_m2s_host_bridge_s0_burstcount),      //  output,    width = 3,                                              .burstcount
		.m2s_host_bridge_s0_byteenable                       (mm_interconnect_0_m2s_host_bridge_s0_byteenable),      //  output,   width = 64,                                              .byteenable
		.m2s_host_bridge_s0_readdatavalid                    (mm_interconnect_0_m2s_host_bridge_s0_readdatavalid),   //   input,    width = 1,                                              .readdatavalid
		.m2s_host_bridge_s0_waitrequest                      (mm_interconnect_0_m2s_host_bridge_s0_waitrequest),     //   input,    width = 1,                                              .waitrequest
		.m2s_host_bridge_s0_debugaccess                      (mm_interconnect_0_m2s_host_bridge_s0_debugaccess),     //  output,    width = 1,                                              .debugaccess
		.m2s_memory_bridge_reset_reset_bridge_in_reset_reset (reset_in_out_reset_reset),                             //   input,    width = 1, m2s_memory_bridge_reset_reset_bridge_in_reset.reset
		.clock_in_out_clk_clk                                (clock_in_out_clk_clk)                                  //   input,    width = 1,                              clock_in_out_clk.clk
	);

	memory_to_stream_dma_bbb_altera_mm_interconnect_191_pnzrvai mm_interconnect_1 (
		.csr_bridge_m0_address                        (csr_bridge_m0_address),                                      //   input,   width = 8,                          csr_bridge_m0.address
		.csr_bridge_m0_waitrequest                    (csr_bridge_m0_waitrequest),                                  //  output,   width = 1,                                       .waitrequest
		.csr_bridge_m0_burstcount                     (csr_bridge_m0_burstcount),                                   //   input,   width = 1,                                       .burstcount
		.csr_bridge_m0_byteenable                     (csr_bridge_m0_byteenable),                                   //   input,   width = 8,                                       .byteenable
		.csr_bridge_m0_read                           (csr_bridge_m0_read),                                         //   input,   width = 1,                                       .read
		.csr_bridge_m0_readdata                       (csr_bridge_m0_readdata),                                     //  output,  width = 64,                                       .readdata
		.csr_bridge_m0_readdatavalid                  (csr_bridge_m0_readdatavalid),                                //  output,   width = 1,                                       .readdatavalid
		.csr_bridge_m0_write                          (csr_bridge_m0_write),                                        //   input,   width = 1,                                       .write
		.csr_bridge_m0_writedata                      (csr_bridge_m0_writedata),                                    //   input,  width = 64,                                       .writedata
		.csr_bridge_m0_debugaccess                    (csr_bridge_m0_debugaccess),                                  //   input,   width = 1,                                       .debugaccess
		.m2s_dispatcher_CSR_address                   (mm_interconnect_1_m2s_dispatcher_csr_address),               //  output,   width = 3,                     m2s_dispatcher_CSR.address
		.m2s_dispatcher_CSR_write                     (mm_interconnect_1_m2s_dispatcher_csr_write),                 //  output,   width = 1,                                       .write
		.m2s_dispatcher_CSR_read                      (mm_interconnect_1_m2s_dispatcher_csr_read),                  //  output,   width = 1,                                       .read
		.m2s_dispatcher_CSR_readdata                  (mm_interconnect_1_m2s_dispatcher_csr_readdata),              //   input,  width = 32,                                       .readdata
		.m2s_dispatcher_CSR_writedata                 (mm_interconnect_1_m2s_dispatcher_csr_writedata),             //  output,  width = 32,                                       .writedata
		.m2s_dispatcher_CSR_byteenable                (mm_interconnect_1_m2s_dispatcher_csr_byteenable),            //  output,   width = 4,                                       .byteenable
		.m2s_id_afu_cfg_slave_address                 (mm_interconnect_1_m2s_id_afu_cfg_slave_address),             //  output,   width = 3,                   m2s_id_afu_cfg_slave.address
		.m2s_id_afu_cfg_slave_write                   (mm_interconnect_1_m2s_id_afu_cfg_slave_write),               //  output,   width = 1,                                       .write
		.m2s_id_afu_cfg_slave_read                    (mm_interconnect_1_m2s_id_afu_cfg_slave_read),                //  output,   width = 1,                                       .read
		.m2s_id_afu_cfg_slave_readdata                (mm_interconnect_1_m2s_id_afu_cfg_slave_readdata),            //   input,  width = 64,                                       .readdata
		.m2s_id_afu_cfg_slave_writedata               (mm_interconnect_1_m2s_id_afu_cfg_slave_writedata),           //  output,  width = 64,                                       .writedata
		.m2s_mSGDMA_frontend_csr_slave_address        (mm_interconnect_1_m2s_msgdma_frontend_csr_slave_address),    //  output,   width = 3,          m2s_mSGDMA_frontend_csr_slave.address
		.m2s_mSGDMA_frontend_csr_slave_write          (mm_interconnect_1_m2s_msgdma_frontend_csr_slave_write),      //  output,   width = 1,                                       .write
		.m2s_mSGDMA_frontend_csr_slave_read           (mm_interconnect_1_m2s_msgdma_frontend_csr_slave_read),       //  output,   width = 1,                                       .read
		.m2s_mSGDMA_frontend_csr_slave_readdata       (mm_interconnect_1_m2s_msgdma_frontend_csr_slave_readdata),   //   input,  width = 64,                                       .readdata
		.m2s_mSGDMA_frontend_csr_slave_writedata      (mm_interconnect_1_m2s_msgdma_frontend_csr_slave_writedata),  //  output,  width = 64,                                       .writedata
		.m2s_mSGDMA_frontend_csr_slave_byteenable     (mm_interconnect_1_m2s_msgdma_frontend_csr_slave_byteenable), //  output,   width = 8,                                       .byteenable
		.csr_bridge_reset_reset_bridge_in_reset_reset (reset_in_out_reset_reset),                                   //   input,   width = 1, csr_bridge_reset_reset_bridge_in_reset.reset
		.clock_in_out_clk_clk                         (clock_in_out_clk_clk)                                        //   input,   width = 1,                       clock_in_out_clk.clk
	);

endmodule
