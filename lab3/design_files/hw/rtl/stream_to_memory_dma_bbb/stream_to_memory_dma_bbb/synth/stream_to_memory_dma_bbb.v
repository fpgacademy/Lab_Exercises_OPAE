// stream_to_memory_dma_bbb.v

// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module stream_to_memory_dma_bbb (
		input  wire         clk_clk,                        //              clk.clk
		input  wire         reset_reset,                    //            reset.reset
		output wire         csr_waitrequest,                //              csr.waitrequest
		output wire [63:0]  csr_readdata,                   //                 .readdata
		output wire         csr_readdatavalid,              //                 .readdatavalid
		input  wire [0:0]   csr_burstcount,                 //                 .burstcount
		input  wire [63:0]  csr_writedata,                  //                 .writedata
		input  wire [7:0]   csr_address,                    //                 .address
		input  wire         csr_write,                      //                 .write
		input  wire         csr_read,                       //                 .read
		input  wire [7:0]   csr_byteenable,                 //                 .byteenable
		input  wire         csr_debugaccess,                //                 .debugaccess
		output wire [47:0]  host_write_address,             //       host_write.address
		output wire [511:0] host_write_writedata,           //                 .writedata
		output wire [63:0]  host_write_byteenable,          //                 .byteenable
		output wire [2:0]   host_write_burstcount,          //                 .burstcount
		output wire         host_write_write,               //                 .write
		input  wire [1:0]   host_write_response,            //                 .response
		input  wire         host_write_writeresponsevalid,  //                 .writeresponsevalid
		input  wire         host_write_waitrequest,         //                 .waitrequest
		output wire [47:0]  descriptor_fetch_address,       // descriptor_fetch.address
		output wire [2:0]   descriptor_fetch_burstcount,    //                 .burstcount
		output wire [63:0]  descriptor_fetch_byteenable,    //                 .byteenable
		output wire         descriptor_fetch_read,          //                 .read
		input  wire [511:0] descriptor_fetch_readdata,      //                 .readdata
		input  wire         descriptor_fetch_readdatavalid, //                 .readdatavalid
		input  wire         descriptor_fetch_waitrequest,   //                 .waitrequest
		output wire [47:0]  descriptor_store_address,       // descriptor_store.address
		output wire [2:0]   descriptor_store_burstcount,    //                 .burstcount
		output wire [63:0]  descriptor_store_byteenable,    //                 .byteenable
		input  wire         descriptor_store_waitrequest,   //                 .waitrequest
		output wire         descriptor_store_write,         //                 .write
		output wire [511:0] descriptor_store_writedata,     //                 .writedata
		input  wire         mem_write_waitrequest,          //        mem_write.waitrequest
		input  wire [511:0] mem_write_readdata,             //                 .readdata
		input  wire         mem_write_readdatavalid,        //                 .readdatavalid
		output wire [2:0]   mem_write_burstcount,           //                 .burstcount
		output wire [511:0] mem_write_writedata,            //                 .writedata
		output wire [47:0]  mem_write_address,              //                 .address
		output wire         mem_write_write,                //                 .write
		output wire         mem_write_read,                 //                 .read
		output wire [63:0]  mem_write_byteenable,           //                 .byteenable
		output wire         mem_write_debugaccess,          //                 .debugaccess
		input  wire [511:0] s2m_st_sink_data,               //      s2m_st_sink.data
		input  wire         s2m_st_sink_valid,              //                 .valid
		output wire         s2m_st_sink_ready,              //                 .ready
		input  wire         s2m_st_sink_startofpacket,      //                 .startofpacket
		input  wire         s2m_st_sink_endofpacket,        //                 .endofpacket
		input  wire [5:0]   s2m_st_sink_empty               //                 .empty
	);

	wire          s2m_write_master_response_source_valid;                     // s2m_write_master:src_response_valid -> s2m_dispatcher:snk_write_master_valid
	wire  [255:0] s2m_write_master_response_source_data;                      // s2m_write_master:src_response_data -> s2m_dispatcher:snk_write_master_data
	wire          s2m_write_master_response_source_ready;                     // s2m_dispatcher:snk_write_master_ready -> s2m_write_master:src_response_ready
	wire          s2m_dispatcher_response_source_valid;                       // s2m_dispatcher:src_response_valid -> s2m_mSGDMA_frontend:snk_response_valid
	wire  [255:0] s2m_dispatcher_response_source_data;                        // s2m_dispatcher:src_response_data -> s2m_mSGDMA_frontend:snk_response_data
	wire          s2m_dispatcher_response_source_ready;                       // s2m_mSGDMA_frontend:snk_response_ready -> s2m_dispatcher:src_response_ready
	wire          s2m_dispatcher_write_command_source_valid;                  // s2m_dispatcher:src_write_master_valid -> s2m_write_master:snk_command_valid
	wire  [255:0] s2m_dispatcher_write_command_source_data;                   // s2m_dispatcher:src_write_master_data -> s2m_write_master:snk_command_data
	wire          s2m_dispatcher_write_command_source_ready;                  // s2m_write_master:snk_command_ready -> s2m_dispatcher:src_write_master_ready
	wire          s2m_msgdma_frontend_descriptor_source_valid;                // s2m_mSGDMA_frontend:src_descriptor_valid -> s2m_dispatcher:snk_descriptor_valid
	wire  [255:0] s2m_msgdma_frontend_descriptor_source_data;                 // s2m_mSGDMA_frontend:src_descriptor_data -> s2m_dispatcher:snk_descriptor_data
	wire          s2m_msgdma_frontend_descriptor_source_ready;                // s2m_dispatcher:snk_descriptor_ready -> s2m_mSGDMA_frontend:src_descriptor_ready
	wire          clock_in_out_clk_clk;                                       // clock_in:out_clk -> [mm_interconnect_0:clock_in_out_clk_clk, mm_interconnect_1:clock_in_out_clk_clk, reset_in:clk, s2m_bbb_id:clk, s2m_csr_bridge:clk, s2m_dispatcher:clk, s2m_host_bridge:s_clk, s2m_mSGDMA_frontend:clk, s2m_mem_bridge:clk, s2m_write_master:clk]
	wire          reset_in_out_reset_reset;                                   // reset_in:out_reset -> [mm_interconnect_0:s2m_mem_bridge_reset_reset_bridge_in_reset_reset, mm_interconnect_1:s2m_csr_bridge_reset_reset_bridge_in_reset_reset, s2m_bbb_id:reset, s2m_csr_bridge:reset, s2m_dispatcher:reset, s2m_host_bridge:reset, s2m_mSGDMA_frontend:reset, s2m_mem_bridge:reset, s2m_write_master:reset]
	wire          s2m_write_master_data_write_master_waitrequest;             // mm_interconnect_0:s2m_write_master_Data_Write_Master_waitrequest -> s2m_write_master:master_waitrequest
	wire   [48:0] s2m_write_master_data_write_master_address;                 // s2m_write_master:master_address -> mm_interconnect_0:s2m_write_master_Data_Write_Master_address
	wire   [63:0] s2m_write_master_data_write_master_byteenable;              // s2m_write_master:master_byteenable -> mm_interconnect_0:s2m_write_master_Data_Write_Master_byteenable
	wire    [1:0] s2m_write_master_data_write_master_response;                // mm_interconnect_0:s2m_write_master_Data_Write_Master_response -> s2m_write_master:master_response
	wire          s2m_write_master_data_write_master_write;                   // s2m_write_master:master_write -> mm_interconnect_0:s2m_write_master_Data_Write_Master_write
	wire  [511:0] s2m_write_master_data_write_master_writedata;               // s2m_write_master:master_writedata -> mm_interconnect_0:s2m_write_master_Data_Write_Master_writedata
	wire          s2m_write_master_data_write_master_writeresponsevalid;      // mm_interconnect_0:s2m_write_master_Data_Write_Master_writeresponsevalid -> s2m_write_master:master_writeresponsevalid
	wire    [2:0] s2m_write_master_data_write_master_burstcount;              // s2m_write_master:master_burstcount -> mm_interconnect_0:s2m_write_master_Data_Write_Master_burstcount
	wire  [511:0] mm_interconnect_0_s2m_mem_bridge_s0_readdata;               // s2m_mem_bridge:s0_readdata -> mm_interconnect_0:s2m_mem_bridge_s0_readdata
	wire          mm_interconnect_0_s2m_mem_bridge_s0_waitrequest;            // s2m_mem_bridge:s0_waitrequest -> mm_interconnect_0:s2m_mem_bridge_s0_waitrequest
	wire          mm_interconnect_0_s2m_mem_bridge_s0_debugaccess;            // mm_interconnect_0:s2m_mem_bridge_s0_debugaccess -> s2m_mem_bridge:s0_debugaccess
	wire   [47:0] mm_interconnect_0_s2m_mem_bridge_s0_address;                // mm_interconnect_0:s2m_mem_bridge_s0_address -> s2m_mem_bridge:s0_address
	wire          mm_interconnect_0_s2m_mem_bridge_s0_read;                   // mm_interconnect_0:s2m_mem_bridge_s0_read -> s2m_mem_bridge:s0_read
	wire   [63:0] mm_interconnect_0_s2m_mem_bridge_s0_byteenable;             // mm_interconnect_0:s2m_mem_bridge_s0_byteenable -> s2m_mem_bridge:s0_byteenable
	wire          mm_interconnect_0_s2m_mem_bridge_s0_readdatavalid;          // s2m_mem_bridge:s0_readdatavalid -> mm_interconnect_0:s2m_mem_bridge_s0_readdatavalid
	wire          mm_interconnect_0_s2m_mem_bridge_s0_write;                  // mm_interconnect_0:s2m_mem_bridge_s0_write -> s2m_mem_bridge:s0_write
	wire  [511:0] mm_interconnect_0_s2m_mem_bridge_s0_writedata;              // mm_interconnect_0:s2m_mem_bridge_s0_writedata -> s2m_mem_bridge:s0_writedata
	wire    [2:0] mm_interconnect_0_s2m_mem_bridge_s0_burstcount;             // mm_interconnect_0:s2m_mem_bridge_s0_burstcount -> s2m_mem_bridge:s0_burstcount
	wire          mm_interconnect_0_s2m_host_bridge_slave_waitrequest;        // s2m_host_bridge:s_waitrequest -> mm_interconnect_0:s2m_host_bridge_slave_waitrequest
	wire   [47:0] mm_interconnect_0_s2m_host_bridge_slave_address;            // mm_interconnect_0:s2m_host_bridge_slave_address -> s2m_host_bridge:s_address
	wire   [63:0] mm_interconnect_0_s2m_host_bridge_slave_byteenable;         // mm_interconnect_0:s2m_host_bridge_slave_byteenable -> s2m_host_bridge:s_byteenable
	wire    [1:0] mm_interconnect_0_s2m_host_bridge_slave_response;           // s2m_host_bridge:s_response -> mm_interconnect_0:s2m_host_bridge_slave_response
	wire          mm_interconnect_0_s2m_host_bridge_slave_write;              // mm_interconnect_0:s2m_host_bridge_slave_write -> s2m_host_bridge:s_write
	wire  [511:0] mm_interconnect_0_s2m_host_bridge_slave_writedata;          // mm_interconnect_0:s2m_host_bridge_slave_writedata -> s2m_host_bridge:s_writedata
	wire          mm_interconnect_0_s2m_host_bridge_slave_writeresponsevalid; // s2m_host_bridge:s_writeresponsevalid -> mm_interconnect_0:s2m_host_bridge_slave_writeresponsevalid
	wire    [2:0] mm_interconnect_0_s2m_host_bridge_slave_burstcount;         // mm_interconnect_0:s2m_host_bridge_slave_burstcount -> s2m_host_bridge:s_burst
	wire          s2m_csr_bridge_m0_waitrequest;                              // mm_interconnect_1:s2m_csr_bridge_m0_waitrequest -> s2m_csr_bridge:m0_waitrequest
	wire   [63:0] s2m_csr_bridge_m0_readdata;                                 // mm_interconnect_1:s2m_csr_bridge_m0_readdata -> s2m_csr_bridge:m0_readdata
	wire          s2m_csr_bridge_m0_debugaccess;                              // s2m_csr_bridge:m0_debugaccess -> mm_interconnect_1:s2m_csr_bridge_m0_debugaccess
	wire    [7:0] s2m_csr_bridge_m0_address;                                  // s2m_csr_bridge:m0_address -> mm_interconnect_1:s2m_csr_bridge_m0_address
	wire          s2m_csr_bridge_m0_read;                                     // s2m_csr_bridge:m0_read -> mm_interconnect_1:s2m_csr_bridge_m0_read
	wire    [7:0] s2m_csr_bridge_m0_byteenable;                               // s2m_csr_bridge:m0_byteenable -> mm_interconnect_1:s2m_csr_bridge_m0_byteenable
	wire          s2m_csr_bridge_m0_readdatavalid;                            // mm_interconnect_1:s2m_csr_bridge_m0_readdatavalid -> s2m_csr_bridge:m0_readdatavalid
	wire   [63:0] s2m_csr_bridge_m0_writedata;                                // s2m_csr_bridge:m0_writedata -> mm_interconnect_1:s2m_csr_bridge_m0_writedata
	wire          s2m_csr_bridge_m0_write;                                    // s2m_csr_bridge:m0_write -> mm_interconnect_1:s2m_csr_bridge_m0_write
	wire    [0:0] s2m_csr_bridge_m0_burstcount;                               // s2m_csr_bridge:m0_burstcount -> mm_interconnect_1:s2m_csr_bridge_m0_burstcount
	wire   [31:0] mm_interconnect_1_s2m_dispatcher_csr_readdata;              // s2m_dispatcher:csr_readdata -> mm_interconnect_1:s2m_dispatcher_CSR_readdata
	wire    [2:0] mm_interconnect_1_s2m_dispatcher_csr_address;               // mm_interconnect_1:s2m_dispatcher_CSR_address -> s2m_dispatcher:csr_address
	wire          mm_interconnect_1_s2m_dispatcher_csr_read;                  // mm_interconnect_1:s2m_dispatcher_CSR_read -> s2m_dispatcher:csr_read
	wire    [3:0] mm_interconnect_1_s2m_dispatcher_csr_byteenable;            // mm_interconnect_1:s2m_dispatcher_CSR_byteenable -> s2m_dispatcher:csr_byteenable
	wire          mm_interconnect_1_s2m_dispatcher_csr_write;                 // mm_interconnect_1:s2m_dispatcher_CSR_write -> s2m_dispatcher:csr_write
	wire   [31:0] mm_interconnect_1_s2m_dispatcher_csr_writedata;             // mm_interconnect_1:s2m_dispatcher_CSR_writedata -> s2m_dispatcher:csr_writedata
	wire   [63:0] mm_interconnect_1_s2m_bbb_id_afu_cfg_slave_readdata;        // s2m_bbb_id:avmm_readdata -> mm_interconnect_1:s2m_bbb_id_afu_cfg_slave_readdata
	wire    [2:0] mm_interconnect_1_s2m_bbb_id_afu_cfg_slave_address;         // mm_interconnect_1:s2m_bbb_id_afu_cfg_slave_address -> s2m_bbb_id:avmm_address
	wire          mm_interconnect_1_s2m_bbb_id_afu_cfg_slave_read;            // mm_interconnect_1:s2m_bbb_id_afu_cfg_slave_read -> s2m_bbb_id:avmm_read
	wire          mm_interconnect_1_s2m_bbb_id_afu_cfg_slave_write;           // mm_interconnect_1:s2m_bbb_id_afu_cfg_slave_write -> s2m_bbb_id:avmm_write
	wire   [63:0] mm_interconnect_1_s2m_bbb_id_afu_cfg_slave_writedata;       // mm_interconnect_1:s2m_bbb_id_afu_cfg_slave_writedata -> s2m_bbb_id:avmm_writedata
	wire   [63:0] mm_interconnect_1_s2m_msgdma_frontend_csr_slave_readdata;   // s2m_mSGDMA_frontend:s_readdata -> mm_interconnect_1:s2m_mSGDMA_frontend_csr_slave_readdata
	wire    [2:0] mm_interconnect_1_s2m_msgdma_frontend_csr_slave_address;    // mm_interconnect_1:s2m_mSGDMA_frontend_csr_slave_address -> s2m_mSGDMA_frontend:s_address
	wire          mm_interconnect_1_s2m_msgdma_frontend_csr_slave_read;       // mm_interconnect_1:s2m_mSGDMA_frontend_csr_slave_read -> s2m_mSGDMA_frontend:s_read
	wire    [7:0] mm_interconnect_1_s2m_msgdma_frontend_csr_slave_byteenable; // mm_interconnect_1:s2m_mSGDMA_frontend_csr_slave_byteenable -> s2m_mSGDMA_frontend:s_byteenable
	wire          mm_interconnect_1_s2m_msgdma_frontend_csr_slave_write;      // mm_interconnect_1:s2m_mSGDMA_frontend_csr_slave_write -> s2m_mSGDMA_frontend:s_write
	wire   [63:0] mm_interconnect_1_s2m_msgdma_frontend_csr_slave_writedata;  // mm_interconnect_1:s2m_mSGDMA_frontend_csr_slave_writedata -> s2m_mSGDMA_frontend:s_writedata

	stream_to_memory_dma_bbb_clock_in clock_in (
		.in_clk  (clk_clk),              //   input,  width = 1,  in_clk.clk
		.out_clk (clock_in_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	stream_to_memory_dma_bbb_reset_in reset_in (
		.clk       (clock_in_out_clk_clk),     //   input,  width = 1,       clk.clk
		.in_reset  (reset_reset),              //   input,  width = 1,  in_reset.reset
		.out_reset (reset_in_out_reset_reset)  //  output,  width = 1, out_reset.reset
	);

	stream_to_memory_dma_bbb_id s2m_bbb_id (
		.avmm_readdata  (mm_interconnect_1_s2m_bbb_id_afu_cfg_slave_readdata),  //  output,  width = 64, afu_cfg_slave.readdata
		.avmm_writedata (mm_interconnect_1_s2m_bbb_id_afu_cfg_slave_writedata), //   input,  width = 64,              .writedata
		.avmm_address   (mm_interconnect_1_s2m_bbb_id_afu_cfg_slave_address),   //   input,   width = 3,              .address
		.avmm_write     (mm_interconnect_1_s2m_bbb_id_afu_cfg_slave_write),     //   input,   width = 1,              .write
		.avmm_read      (mm_interconnect_1_s2m_bbb_id_afu_cfg_slave_read),      //   input,   width = 1,              .read
		.clk            (clock_in_out_clk_clk),                                 //   input,   width = 1,         clock.clk
		.reset          (reset_in_out_reset_reset)                              //   input,   width = 1,         reset.reset
	);

	stream_to_memory_dma_bbb_csr_bridge s2m_csr_bridge (
		.clk              (clock_in_out_clk_clk),            //   input,   width = 1,   clk.clk
		.m0_waitrequest   (s2m_csr_bridge_m0_waitrequest),   //   input,   width = 1,    m0.waitrequest
		.m0_readdata      (s2m_csr_bridge_m0_readdata),      //   input,  width = 64,      .readdata
		.m0_readdatavalid (s2m_csr_bridge_m0_readdatavalid), //   input,   width = 1,      .readdatavalid
		.m0_burstcount    (s2m_csr_bridge_m0_burstcount),    //  output,   width = 1,      .burstcount
		.m0_writedata     (s2m_csr_bridge_m0_writedata),     //  output,  width = 64,      .writedata
		.m0_address       (s2m_csr_bridge_m0_address),       //  output,   width = 8,      .address
		.m0_write         (s2m_csr_bridge_m0_write),         //  output,   width = 1,      .write
		.m0_read          (s2m_csr_bridge_m0_read),          //  output,   width = 1,      .read
		.m0_byteenable    (s2m_csr_bridge_m0_byteenable),    //  output,   width = 8,      .byteenable
		.m0_debugaccess   (s2m_csr_bridge_m0_debugaccess),   //  output,   width = 1,      .debugaccess
		.reset            (reset_in_out_reset_reset),        //   input,   width = 1, reset.reset
		.s0_waitrequest   (csr_waitrequest),                 //  output,   width = 1,    s0.waitrequest
		.s0_readdata      (csr_readdata),                    //  output,  width = 64,      .readdata
		.s0_readdatavalid (csr_readdatavalid),               //  output,   width = 1,      .readdatavalid
		.s0_burstcount    (csr_burstcount),                  //   input,   width = 1,      .burstcount
		.s0_writedata     (csr_writedata),                   //   input,  width = 64,      .writedata
		.s0_address       (csr_address),                     //   input,   width = 8,      .address
		.s0_write         (csr_write),                       //   input,   width = 1,      .write
		.s0_read          (csr_read),                        //   input,   width = 1,      .read
		.s0_byteenable    (csr_byteenable),                  //   input,   width = 8,      .byteenable
		.s0_debugaccess   (csr_debugaccess)                  //   input,   width = 1,      .debugaccess
	);

	stream_to_memory_dma_bbb_dcp_modular_sgdma_dispatcher s2m_dispatcher (
		.csr_writedata          (mm_interconnect_1_s2m_dispatcher_csr_writedata),  //   input,   width = 32,                  CSR.writedata
		.csr_write              (mm_interconnect_1_s2m_dispatcher_csr_write),      //   input,    width = 1,                     .write
		.csr_byteenable         (mm_interconnect_1_s2m_dispatcher_csr_byteenable), //   input,    width = 4,                     .byteenable
		.csr_readdata           (mm_interconnect_1_s2m_dispatcher_csr_readdata),   //  output,   width = 32,                     .readdata
		.csr_read               (mm_interconnect_1_s2m_dispatcher_csr_read),       //   input,    width = 1,                     .read
		.csr_address            (mm_interconnect_1_s2m_dispatcher_csr_address),    //   input,    width = 3,                     .address
		.snk_descriptor_data    (s2m_msgdma_frontend_descriptor_source_data),      //   input,  width = 256,      Descriptor_Sink.data
		.snk_descriptor_valid   (s2m_msgdma_frontend_descriptor_source_valid),     //   input,    width = 1,                     .valid
		.snk_descriptor_ready   (s2m_msgdma_frontend_descriptor_source_ready),     //  output,    width = 1,                     .ready
		.src_response_data      (s2m_dispatcher_response_source_data),             //  output,  width = 256,      Response_Source.data
		.src_response_valid     (s2m_dispatcher_response_source_valid),            //  output,    width = 1,                     .valid
		.src_response_ready     (s2m_dispatcher_response_source_ready),            //   input,    width = 1,                     .ready
		.src_write_master_data  (s2m_dispatcher_write_command_source_data),        //  output,  width = 256, Write_Command_Source.data
		.src_write_master_valid (s2m_dispatcher_write_command_source_valid),       //  output,    width = 1,                     .valid
		.src_write_master_ready (s2m_dispatcher_write_command_source_ready),       //   input,    width = 1,                     .ready
		.snk_write_master_data  (s2m_write_master_response_source_data),           //   input,  width = 256,  Write_Response_Sink.data
		.snk_write_master_valid (s2m_write_master_response_source_valid),          //   input,    width = 1,                     .valid
		.snk_write_master_ready (s2m_write_master_response_source_ready),          //  output,    width = 1,                     .ready
		.clk                    (clock_in_out_clk_clk),                            //   input,    width = 1,                clock.clk
		.reset                  (reset_in_out_reset_reset)                         //   input,    width = 1,          clock_reset.reset
	);

	stream_to_memory_dma_bbb_host_bridge s2m_host_bridge (
		.s_clk                (clock_in_out_clk_clk),                                       //   input,    width = 1,    clk.clk
		.m_address            (host_write_address),                                         //  output,   width = 48, master.address
		.m_writedata          (host_write_writedata),                                       //  output,  width = 512,       .writedata
		.m_byteenable         (host_write_byteenable),                                      //  output,   width = 64,       .byteenable
		.m_burst              (host_write_burstcount),                                      //  output,    width = 3,       .burstcount
		.m_write              (host_write_write),                                           //  output,    width = 1,       .write
		.m_response           (host_write_response),                                        //   input,    width = 2,       .response
		.m_writeresponsevalid (host_write_writeresponsevalid),                              //   input,    width = 1,       .writeresponsevalid
		.m_waitrequest        (host_write_waitrequest),                                     //   input,    width = 1,       .waitrequest
		.reset                (reset_in_out_reset_reset),                                   //   input,    width = 1,  reset.reset
		.s_address            (mm_interconnect_0_s2m_host_bridge_slave_address),            //   input,   width = 48,  slave.address
		.s_writedata          (mm_interconnect_0_s2m_host_bridge_slave_writedata),          //   input,  width = 512,       .writedata
		.s_byteenable         (mm_interconnect_0_s2m_host_bridge_slave_byteenable),         //   input,   width = 64,       .byteenable
		.s_write              (mm_interconnect_0_s2m_host_bridge_slave_write),              //   input,    width = 1,       .write
		.s_response           (mm_interconnect_0_s2m_host_bridge_slave_response),           //  output,    width = 2,       .response
		.s_writeresponsevalid (mm_interconnect_0_s2m_host_bridge_slave_writeresponsevalid), //  output,    width = 1,       .writeresponsevalid
		.s_waitrequest        (mm_interconnect_0_s2m_host_bridge_slave_waitrequest),        //  output,    width = 1,       .waitrequest
		.s_burst              (mm_interconnect_0_s2m_host_bridge_slave_burstcount)          //   input,    width = 3,       .burstcount
	);

	stream_to_memory_dma_bbb_mSGDMA_frontend s2m_msgdma_frontend (
		.clk                   (clock_in_out_clk_clk),                                       //   input,    width = 1,                   clock.clk
		.s_address             (mm_interconnect_1_s2m_msgdma_frontend_csr_slave_address),    //   input,    width = 3,               csr_slave.address
		.s_read                (mm_interconnect_1_s2m_msgdma_frontend_csr_slave_read),       //   input,    width = 1,                        .read
		.s_readdata            (mm_interconnect_1_s2m_msgdma_frontend_csr_slave_readdata),   //  output,   width = 64,                        .readdata
		.s_write               (mm_interconnect_1_s2m_msgdma_frontend_csr_slave_write),      //   input,    width = 1,                        .write
		.s_writedata           (mm_interconnect_1_s2m_msgdma_frontend_csr_slave_writedata),  //   input,   width = 64,                        .writedata
		.s_byteenable          (mm_interconnect_1_s2m_msgdma_frontend_csr_slave_byteenable), //   input,    width = 8,                        .byteenable
		.m_fetch_address       (descriptor_fetch_address),                                   //  output,   width = 48, descriptor_fetch_master.address
		.m_fetch_burst         (descriptor_fetch_burstcount),                                //  output,    width = 3,                        .burstcount
		.m_fetch_byteenable    (descriptor_fetch_byteenable),                                //  output,   width = 64,                        .byteenable
		.m_fetch_read          (descriptor_fetch_read),                                      //  output,    width = 1,                        .read
		.m_fetch_readdata      (descriptor_fetch_readdata),                                  //   input,  width = 512,                        .readdata
		.m_fetch_readdatavalid (descriptor_fetch_readdatavalid),                             //   input,    width = 1,                        .readdatavalid
		.m_fetch_waitrequest   (descriptor_fetch_waitrequest),                               //   input,    width = 1,                        .waitrequest
		.src_descriptor_data   (s2m_msgdma_frontend_descriptor_source_data),                 //  output,  width = 256,       descriptor_source.data
		.src_descriptor_ready  (s2m_msgdma_frontend_descriptor_source_ready),                //   input,    width = 1,                        .ready
		.src_descriptor_valid  (s2m_msgdma_frontend_descriptor_source_valid),                //  output,    width = 1,                        .valid
		.m_store_address       (descriptor_store_address),                                   //  output,   width = 48, descriptor_store_master.address
		.m_store_burst         (descriptor_store_burstcount),                                //  output,    width = 3,                        .burstcount
		.m_store_byteenable    (descriptor_store_byteenable),                                //  output,   width = 64,                        .byteenable
		.m_store_waitrequest   (descriptor_store_waitrequest),                               //   input,    width = 1,                        .waitrequest
		.m_store_write         (descriptor_store_write),                                     //  output,    width = 1,                        .write
		.m_store_writedata     (descriptor_store_writedata),                                 //  output,  width = 512,                        .writedata
		.reset                 (reset_in_out_reset_reset),                                   //   input,    width = 1,                   reset.reset
		.snk_response_data     (s2m_dispatcher_response_source_data),                        //   input,  width = 256,           response_sink.data
		.snk_response_ready    (s2m_dispatcher_response_source_ready),                       //  output,    width = 1,                        .ready
		.snk_response_valid    (s2m_dispatcher_response_source_valid)                        //   input,    width = 1,                        .valid
	);

	stream_to_memory_dma_bbb_memory_bridge s2m_mem_bridge (
		.clk              (clock_in_out_clk_clk),                              //   input,    width = 1,   clk.clk
		.m0_waitrequest   (mem_write_waitrequest),                             //   input,    width = 1,    m0.waitrequest
		.m0_readdata      (mem_write_readdata),                                //   input,  width = 512,      .readdata
		.m0_readdatavalid (mem_write_readdatavalid),                           //   input,    width = 1,      .readdatavalid
		.m0_burstcount    (mem_write_burstcount),                              //  output,    width = 3,      .burstcount
		.m0_writedata     (mem_write_writedata),                               //  output,  width = 512,      .writedata
		.m0_address       (mem_write_address),                                 //  output,   width = 48,      .address
		.m0_write         (mem_write_write),                                   //  output,    width = 1,      .write
		.m0_read          (mem_write_read),                                    //  output,    width = 1,      .read
		.m0_byteenable    (mem_write_byteenable),                              //  output,   width = 64,      .byteenable
		.m0_debugaccess   (mem_write_debugaccess),                             //  output,    width = 1,      .debugaccess
		.reset            (reset_in_out_reset_reset),                          //   input,    width = 1, reset.reset
		.s0_waitrequest   (mm_interconnect_0_s2m_mem_bridge_s0_waitrequest),   //  output,    width = 1,    s0.waitrequest
		.s0_readdata      (mm_interconnect_0_s2m_mem_bridge_s0_readdata),      //  output,  width = 512,      .readdata
		.s0_readdatavalid (mm_interconnect_0_s2m_mem_bridge_s0_readdatavalid), //  output,    width = 1,      .readdatavalid
		.s0_burstcount    (mm_interconnect_0_s2m_mem_bridge_s0_burstcount),    //   input,    width = 3,      .burstcount
		.s0_writedata     (mm_interconnect_0_s2m_mem_bridge_s0_writedata),     //   input,  width = 512,      .writedata
		.s0_address       (mm_interconnect_0_s2m_mem_bridge_s0_address),       //   input,   width = 48,      .address
		.s0_write         (mm_interconnect_0_s2m_mem_bridge_s0_write),         //   input,    width = 1,      .write
		.s0_read          (mm_interconnect_0_s2m_mem_bridge_s0_read),          //   input,    width = 1,      .read
		.s0_byteenable    (mm_interconnect_0_s2m_mem_bridge_s0_byteenable),    //   input,   width = 64,      .byteenable
		.s0_debugaccess   (mm_interconnect_0_s2m_mem_bridge_s0_debugaccess)    //   input,    width = 1,      .debugaccess
	);

	stream_to_memory_dma_bbb_write_master s2m_write_master (
		.clk                       (clock_in_out_clk_clk),                                  //   input,    width = 1,             Clock.clk
		.reset                     (reset_in_out_reset_reset),                              //   input,    width = 1,       Clock_reset.reset
		.snk_command_data          (s2m_dispatcher_write_command_source_data),              //   input,  width = 256,      Command_Sink.data
		.snk_command_valid         (s2m_dispatcher_write_command_source_valid),             //   input,    width = 1,                  .valid
		.snk_command_ready         (s2m_dispatcher_write_command_source_ready),             //  output,    width = 1,                  .ready
		.snk_data                  (s2m_st_sink_data),                                      //   input,  width = 512,         Data_Sink.data
		.snk_valid                 (s2m_st_sink_valid),                                     //   input,    width = 1,                  .valid
		.snk_ready                 (s2m_st_sink_ready),                                     //  output,    width = 1,                  .ready
		.snk_sop                   (s2m_st_sink_startofpacket),                             //   input,    width = 1,                  .startofpacket
		.snk_eop                   (s2m_st_sink_endofpacket),                               //   input,    width = 1,                  .endofpacket
		.snk_empty                 (s2m_st_sink_empty),                                     //   input,    width = 6,                  .empty
		.master_address            (s2m_write_master_data_write_master_address),            //  output,   width = 49, Data_Write_Master.address
		.master_write              (s2m_write_master_data_write_master_write),              //  output,    width = 1,                  .write
		.master_byteenable         (s2m_write_master_data_write_master_byteenable),         //  output,   width = 64,                  .byteenable
		.master_writedata          (s2m_write_master_data_write_master_writedata),          //  output,  width = 512,                  .writedata
		.master_waitrequest        (s2m_write_master_data_write_master_waitrequest),        //   input,    width = 1,                  .waitrequest
		.master_burstcount         (s2m_write_master_data_write_master_burstcount),         //  output,    width = 3,                  .burstcount
		.master_response           (s2m_write_master_data_write_master_response),           //   input,    width = 2,                  .response
		.master_writeresponsevalid (s2m_write_master_data_write_master_writeresponsevalid), //   input,    width = 1,                  .writeresponsevalid
		.src_response_data         (s2m_write_master_response_source_data),                 //  output,  width = 256,   Response_Source.data
		.src_response_valid        (s2m_write_master_response_source_valid),                //  output,    width = 1,                  .valid
		.src_response_ready        (s2m_write_master_response_source_ready)                 //   input,    width = 1,                  .ready
	);

	stream_to_memory_dma_bbb_altera_mm_interconnect_191_pedf4yy mm_interconnect_0 (
		.s2m_write_master_Data_Write_Master_address            (s2m_write_master_data_write_master_address),                 //   input,   width = 49,         s2m_write_master_Data_Write_Master.address
		.s2m_write_master_Data_Write_Master_waitrequest        (s2m_write_master_data_write_master_waitrequest),             //  output,    width = 1,                                           .waitrequest
		.s2m_write_master_Data_Write_Master_burstcount         (s2m_write_master_data_write_master_burstcount),              //   input,    width = 3,                                           .burstcount
		.s2m_write_master_Data_Write_Master_byteenable         (s2m_write_master_data_write_master_byteenable),              //   input,   width = 64,                                           .byteenable
		.s2m_write_master_Data_Write_Master_write              (s2m_write_master_data_write_master_write),                   //   input,    width = 1,                                           .write
		.s2m_write_master_Data_Write_Master_writedata          (s2m_write_master_data_write_master_writedata),               //   input,  width = 512,                                           .writedata
		.s2m_write_master_Data_Write_Master_response           (s2m_write_master_data_write_master_response),                //  output,    width = 2,                                           .response
		.s2m_write_master_Data_Write_Master_writeresponsevalid (s2m_write_master_data_write_master_writeresponsevalid),      //  output,    width = 1,                                           .writeresponsevalid
		.s2m_mem_bridge_s0_address                             (mm_interconnect_0_s2m_mem_bridge_s0_address),                //  output,   width = 48,                          s2m_mem_bridge_s0.address
		.s2m_mem_bridge_s0_write                               (mm_interconnect_0_s2m_mem_bridge_s0_write),                  //  output,    width = 1,                                           .write
		.s2m_mem_bridge_s0_read                                (mm_interconnect_0_s2m_mem_bridge_s0_read),                   //  output,    width = 1,                                           .read
		.s2m_mem_bridge_s0_readdata                            (mm_interconnect_0_s2m_mem_bridge_s0_readdata),               //   input,  width = 512,                                           .readdata
		.s2m_mem_bridge_s0_writedata                           (mm_interconnect_0_s2m_mem_bridge_s0_writedata),              //  output,  width = 512,                                           .writedata
		.s2m_mem_bridge_s0_burstcount                          (mm_interconnect_0_s2m_mem_bridge_s0_burstcount),             //  output,    width = 3,                                           .burstcount
		.s2m_mem_bridge_s0_byteenable                          (mm_interconnect_0_s2m_mem_bridge_s0_byteenable),             //  output,   width = 64,                                           .byteenable
		.s2m_mem_bridge_s0_readdatavalid                       (mm_interconnect_0_s2m_mem_bridge_s0_readdatavalid),          //   input,    width = 1,                                           .readdatavalid
		.s2m_mem_bridge_s0_waitrequest                         (mm_interconnect_0_s2m_mem_bridge_s0_waitrequest),            //   input,    width = 1,                                           .waitrequest
		.s2m_mem_bridge_s0_debugaccess                         (mm_interconnect_0_s2m_mem_bridge_s0_debugaccess),            //  output,    width = 1,                                           .debugaccess
		.s2m_host_bridge_slave_address                         (mm_interconnect_0_s2m_host_bridge_slave_address),            //  output,   width = 48,                      s2m_host_bridge_slave.address
		.s2m_host_bridge_slave_write                           (mm_interconnect_0_s2m_host_bridge_slave_write),              //  output,    width = 1,                                           .write
		.s2m_host_bridge_slave_writedata                       (mm_interconnect_0_s2m_host_bridge_slave_writedata),          //  output,  width = 512,                                           .writedata
		.s2m_host_bridge_slave_burstcount                      (mm_interconnect_0_s2m_host_bridge_slave_burstcount),         //  output,    width = 3,                                           .burstcount
		.s2m_host_bridge_slave_byteenable                      (mm_interconnect_0_s2m_host_bridge_slave_byteenable),         //  output,   width = 64,                                           .byteenable
		.s2m_host_bridge_slave_waitrequest                     (mm_interconnect_0_s2m_host_bridge_slave_waitrequest),        //   input,    width = 1,                                           .waitrequest
		.s2m_host_bridge_slave_response                        (mm_interconnect_0_s2m_host_bridge_slave_response),           //   input,    width = 2,                                           .response
		.s2m_host_bridge_slave_writeresponsevalid              (mm_interconnect_0_s2m_host_bridge_slave_writeresponsevalid), //   input,    width = 1,                                           .writeresponsevalid
		.s2m_mem_bridge_reset_reset_bridge_in_reset_reset      (reset_in_out_reset_reset),                                   //   input,    width = 1, s2m_mem_bridge_reset_reset_bridge_in_reset.reset
		.clock_in_out_clk_clk                                  (clock_in_out_clk_clk)                                        //   input,    width = 1,                           clock_in_out_clk.clk
	);

	stream_to_memory_dma_bbb_altera_mm_interconnect_191_onxjmkq mm_interconnect_1 (
		.s2m_csr_bridge_m0_address                        (s2m_csr_bridge_m0_address),                                  //   input,   width = 8,                          s2m_csr_bridge_m0.address
		.s2m_csr_bridge_m0_waitrequest                    (s2m_csr_bridge_m0_waitrequest),                              //  output,   width = 1,                                           .waitrequest
		.s2m_csr_bridge_m0_burstcount                     (s2m_csr_bridge_m0_burstcount),                               //   input,   width = 1,                                           .burstcount
		.s2m_csr_bridge_m0_byteenable                     (s2m_csr_bridge_m0_byteenable),                               //   input,   width = 8,                                           .byteenable
		.s2m_csr_bridge_m0_read                           (s2m_csr_bridge_m0_read),                                     //   input,   width = 1,                                           .read
		.s2m_csr_bridge_m0_readdata                       (s2m_csr_bridge_m0_readdata),                                 //  output,  width = 64,                                           .readdata
		.s2m_csr_bridge_m0_readdatavalid                  (s2m_csr_bridge_m0_readdatavalid),                            //  output,   width = 1,                                           .readdatavalid
		.s2m_csr_bridge_m0_write                          (s2m_csr_bridge_m0_write),                                    //   input,   width = 1,                                           .write
		.s2m_csr_bridge_m0_writedata                      (s2m_csr_bridge_m0_writedata),                                //   input,  width = 64,                                           .writedata
		.s2m_csr_bridge_m0_debugaccess                    (s2m_csr_bridge_m0_debugaccess),                              //   input,   width = 1,                                           .debugaccess
		.s2m_dispatcher_CSR_address                       (mm_interconnect_1_s2m_dispatcher_csr_address),               //  output,   width = 3,                         s2m_dispatcher_CSR.address
		.s2m_dispatcher_CSR_write                         (mm_interconnect_1_s2m_dispatcher_csr_write),                 //  output,   width = 1,                                           .write
		.s2m_dispatcher_CSR_read                          (mm_interconnect_1_s2m_dispatcher_csr_read),                  //  output,   width = 1,                                           .read
		.s2m_dispatcher_CSR_readdata                      (mm_interconnect_1_s2m_dispatcher_csr_readdata),              //   input,  width = 32,                                           .readdata
		.s2m_dispatcher_CSR_writedata                     (mm_interconnect_1_s2m_dispatcher_csr_writedata),             //  output,  width = 32,                                           .writedata
		.s2m_dispatcher_CSR_byteenable                    (mm_interconnect_1_s2m_dispatcher_csr_byteenable),            //  output,   width = 4,                                           .byteenable
		.s2m_bbb_id_afu_cfg_slave_address                 (mm_interconnect_1_s2m_bbb_id_afu_cfg_slave_address),         //  output,   width = 3,                   s2m_bbb_id_afu_cfg_slave.address
		.s2m_bbb_id_afu_cfg_slave_write                   (mm_interconnect_1_s2m_bbb_id_afu_cfg_slave_write),           //  output,   width = 1,                                           .write
		.s2m_bbb_id_afu_cfg_slave_read                    (mm_interconnect_1_s2m_bbb_id_afu_cfg_slave_read),            //  output,   width = 1,                                           .read
		.s2m_bbb_id_afu_cfg_slave_readdata                (mm_interconnect_1_s2m_bbb_id_afu_cfg_slave_readdata),        //   input,  width = 64,                                           .readdata
		.s2m_bbb_id_afu_cfg_slave_writedata               (mm_interconnect_1_s2m_bbb_id_afu_cfg_slave_writedata),       //  output,  width = 64,                                           .writedata
		.s2m_mSGDMA_frontend_csr_slave_address            (mm_interconnect_1_s2m_msgdma_frontend_csr_slave_address),    //  output,   width = 3,              s2m_mSGDMA_frontend_csr_slave.address
		.s2m_mSGDMA_frontend_csr_slave_write              (mm_interconnect_1_s2m_msgdma_frontend_csr_slave_write),      //  output,   width = 1,                                           .write
		.s2m_mSGDMA_frontend_csr_slave_read               (mm_interconnect_1_s2m_msgdma_frontend_csr_slave_read),       //  output,   width = 1,                                           .read
		.s2m_mSGDMA_frontend_csr_slave_readdata           (mm_interconnect_1_s2m_msgdma_frontend_csr_slave_readdata),   //   input,  width = 64,                                           .readdata
		.s2m_mSGDMA_frontend_csr_slave_writedata          (mm_interconnect_1_s2m_msgdma_frontend_csr_slave_writedata),  //  output,  width = 64,                                           .writedata
		.s2m_mSGDMA_frontend_csr_slave_byteenable         (mm_interconnect_1_s2m_msgdma_frontend_csr_slave_byteenable), //  output,   width = 8,                                           .byteenable
		.s2m_csr_bridge_reset_reset_bridge_in_reset_reset (reset_in_out_reset_reset),                                   //   input,   width = 1, s2m_csr_bridge_reset_reset_bridge_in_reset.reset
		.clock_in_out_clk_clk                             (clock_in_out_clk_clk)                                        //   input,   width = 1,                           clock_in_out_clk.clk
	);

endmodule
